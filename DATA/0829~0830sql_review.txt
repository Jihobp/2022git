slect food_truc.name 음식명, price, food_category.name 분류
form food_truck join food_category on food_truck.foodcode=food_category.code;

select food_truck.name 음식명, price, food_category.name 분류
from food_truck join food_category on food_truck.foodcode=food_category.code order by food_truck.pice;


view : join을 짧게,

join : (교집합) 서로다른 테이블을 하나의 테이블로 합치는거.
중첩질의 : select 문 안에서 select 문이 또 나오는 거....   
crud - > create read=select update delete..
sequence(시퀀스) 오라클, mssql 에 있는것. my sql엔 없다.
시퀀스는 일종의 변수.
for 문의 i 처럼 값이 순차적으로 늘어나고, 내가 수동적으로 값을 넣지 않아도 자동으로 갑 증가. 
nextval을 ㅆㅡ면 그 순서가 아니어도 증가된 순서로 추가해주듯이 증가 값을 넣어줌.

insert into food_truck values (food_rownum.nextval, '딸기라떼', 6000, 8);
insert into food_truck values (food_rownum.nextval, '민트초코라떼', 5900, 8);
insert into food_truck values (food_rownum.nextval, '민트초코프라푸치노', 5900,8);

select food_truck.name 디저트명, price 가격, food_category.name 분류 



create table food  테이블 생성
(
num int primary key,
name varchar2(50),
price int,
foodcode number,
foreign key(foodcode) references food_category(code)
);

--그럼에도 불구하고, food 뒤에 컬럼명 적는 이유?
1. 명시적으로 컬럼들을 보여주기 위해서.
내가 원하는 순서대로 데이터 넣기 위해서
insert into food(price, name, num) values(1,'불고기',7000);
insert into food(num, name,price) values(2,'불고기',6000);
select * from food;
select name from food;

select * from food where price >=6000 and price <7000;

--김치 제육을 김치+제육으로 변경
update food set name='김치+제육' where num=3;
update food set name='김치+제육' where num=3;

업데이트는 끝에 where 절을 안 적으면 모든 데이터가 다 일괄적으로 변경이 된다.
만약 여기서 where 문 없으면 모든 음식메뉴가 (name)깂
select * from food;

insert 할 때 모든 컬럼의 순서를 알고 있다면 생략하고 values부터 적을 수 있다,
이 테이블은 숫자, 문자열, 숫자의 순서인데, 순서를 알고 있다면 food  뒤에 컬럼명 생략 가능.
그럼에도 불구하고 food 뒤에 컬럼명 적는 이유는,
1. 명시적으로 컬럼들을 보여주기 위해서
insert into food(price, name, num) values(10000,'황제정식',5);
2. 내가 원하는 순서대로 데이터를 넣기 위해서
insert into food(num,name)values(6,'랜덤메뉴');

git의 commit 처럼 내가 작성한 insert, update, delete 문을 저장하는 것.
commit 해주지 않고 이 프로그램을 꺼버리면 내가 작성한
insert update delete가 적용이 안됨. 즉, 저장 안하고 끈거랑 같음.
commit;


1. food 테이블에 음식 10개 추가하기
1) 컬럼보여주기
insert into food(price, name, num) values(10000, '바보국밥',6);
2) 내가 원하는 순서
insert into food(num, price) values(5, '10000');
select * from food;

select * from food order by num;
select * from food order by num asc;

asc :: 오름차순 싼순서>오름
desc :: 내림차순, 생략하면 안됨. 비싼순서>내림

select * from food order by price desc; :: 내림차순

null 값이 아닌 것만 조회하고 싶다면 + 가격 비싼 순?
select * from food where price is not null; 

where 은 update, delete에 쓰이고, 
order by 는 정렬에 쓰인다. 제발제밟제뱢댣쟈샛댜ㅐ죠새ㅑ됴새ㅑㅈ뎌갸죳댜ㅐ쇼댜ㅐ쇼소소 ㅑ대ㅑ샫쟈ㅔㅂ달ㅈㄹ

null 값이 아닌것만 조회+ 가격 비싼 순?
select * from food where price is not null order by prcie desc;
update food set price=1000 where price is null;

메뉴명에 김치 들어가는거 조회??
select * from food where name like '%김치%';
select * from food where name like '%피자%';
select*from food where name like '%민트%';

like 구문 문자열에서 쓰임
%기호의 뜻은 0글자 이상
즉, 김치 뿐 아니라 민트초코 김치 아니면 김치 찌개든 김치가 포함되면 다 조회된다.


가격이 500~7000 조회된다
select*from food where price>=500 and price <=7000;

가격이 null 값은 1000으로 조정
update food set price =1000 where price is null;

num 값이 1번인 메뉴의 이름을 맛있는 불고기 라고 바꾸기.
update food set name='맛있는 불고기' where num =1;
update food set name='맛있는 불고기' where num=1;
update food set name='맛있는 민트초코하와이안피자' whre num=2;

다 풀고 커밋 commit;
select*from food;
데이터 추가 수정 삭제하기전에 커밋하고, 만약에 추가수정삭제 잘못했다면 rollback
단, 
1. rollback 은 내가 최근에 commit한 지점으로만 돌아감.
2. autocommit 기능이 켜져있다면, rollback이 안먹음.
because, insert update delete 를 함과 동시에 commit이 된당.


update food set name='민초카레'; 
모든 음식을 민초카레로 바꿈. 모든 음식을 민초카레로 바꾸고 commit 해버리면 돌이킬 수 없다 ㅇㅅㅇ
select * from food;
1. where name like '%민트%';
delete from food where name like '%민트%';
delete from food where name like '%하와이안%';
delete from food where price > 10000;
update food set recipe='msg추가' where price<=5000;
select * from food order by prcie asc; --저렴한 순서로, 



asc :: 오름차순 싼순서>오름                  ::  오름차순, 싼순서부터 올라감
desc :: 내림차순, 생략하면 안됨. 비싼순서>내림   ::   내림차순, 생략하면 안됨, 비싼순서 내림.


select code 분류코드, name 분류명 from food_category;

--외래키 코드는 오타방지, 
--외래키는 두개의 테이블에서 제일 메인인 코드 ㅇㅅㅇ 두근두근

create table food_Truck
(
num int primary key,
name varchar2(100) not null,
price int,
foodcode number, 
foreign key(foodcode) refrences food_cateogry(code)
);
\


SEQUENCE
오라클에 있는건데, MSSQL에 있는 것.
MYSQL에는 없어서 비슷한 걸 따로 만들어줘야함.
create sequence food_rownum;
sequence는 일종의 변수
for문의 i처럼 값이 순차적으로 늘어나는 것 자동으로 값이 증가함. like,, 재고물량 올라감?ㅇㅅㅇ
NEXTVAL : ++i 증가된 값을 넣어줌. 그순서가 아니어도 증가된 순서로 그냥 추가해주는 거다,
num 1 은 어디갔냐면ㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠ
insert into 할때 오류가 나면서 num 값이 들어가려다가 못들어가고 그냥 증가됨.
select * from food_truck;

create sequence dj;
insert into food_truck values(dj.nextval, '딸기카레', 4000,5);
insert into food_truck values(food_rownum.nextval, '오렌지찌개', 3000, 50);
>>>>무결점 제약 조건에 위배됩니다?!!!!!!! 카테고리에서 아예 벗어난 값.
insert into food_truck values(food_rownum.nextval,'타이어', 30000, 7);
insert into food_truck values(food_rownum.nextval, '진짜스펀지케이크', 300,7);
select * from food_truck;

select food_truck.name 음식명, price, food_category.name 분류
from food_truck join food_category on food_truck.foodcode=food_category.code;


join : (교집합) 서로다른 테이블을 하나의 테이블로 합치는거.
중첩질의 : select 문 안에서 select 문이 또 나오는 거....   
crud - > create read=select update delete..
sequence(시퀀스) 오라클, mssql 에 있는것. my sql엔 없다.
시퀀스는 일종의 변수.
for 문의 i 처럼 값이 순차적으로 늘어나고, 내가 수동적으로 값을 넣지 않아도 자동으로 갑 증가. 
nextval을 ㅆㅡ면 그 순서가 아니어도 증가된 순서로 추가해주듯이 증가 값을 넣어줌.


select food_truck.name 음식명, price, food_category.name 분류 
from food_truck join food_category on food_truck.foodcode=food_category.code;



select * from food_truck;

전체 평균 가격.
select avg(price) from food_truck;

전체 최고 가격.
select max(price) from food_truck;

분류(=foodcode)별 평균 가격
select foodcode, avg(price) from food_truck group by foodcode;
select foodcode, max(price) from food_truck group by foodcode;

주의사항 그냥 group by만 쓰면 나머지 값들은 다 짤려버림.(mysql) 
oracle은 아예 안됨.

having group by  한다음에 조건문 쓰는것. 
group by 뒤어 where절인 것.

select foodcode, max(price) from food_truck group by foodcode
having max(price) >10000  : max 값이 만원 넘는 것,

중첩질의 
price 값이 max(price)랑 동일한 것의 데이터 출력 . 쿼리문안에 또 쿼리문안에
select * from food_truck where price=(select max(price)from food_truck);
select * from food_truck where price=(select max(price)from food_truck);
select * from food_truck where price=(select max(price)from food_truck);
select * from food_truck where price=(select max(price)from food_truck);
--쿼리문 안에 또 다른 쿼리문이 들어간 것.

--view
--view : 가상 테이블
--select 문으로 만들어진 가상의 테이블
--create table 문으로 만들어진 정식 테이블이 아니고
--기존테이블들을 이용해서 자료조회하고, 그 조회된 자료가지고 만들어진 가상의 테이블.
--sql plus 열어서 c## view 추가

--food_truck의 최고가 저장 테이블. view
create view find_max_price as select max(price) max_price from food_truck;
select * from find_max_price;


--view를 잘 이용하면 중첩 질의가 더 간략해줄 수 있다.
select * from food_truck where price=(select * from find_max_price);
select * from food_truck where price=(select * from find_max_price);
select * from food_truck where price=(select * from find_max_price);
>> 푸드 트럭을 선택한다, price = 최고가 맥스 가격.
>> 맥스 가격을 찾아도 그걸 갖고 있는 뭔가는 못찾으니까 중첩질의, 를 view 를 만들어 주는 것.      
select * from food_truck where price=(select * from find_max_price); 

--전체 최고 가격
select max(price) from food_truck;




--문제--

0. 분류 코드별로 평균 표시
select foodcode, avg(price) from food_truck group by foodcode;




--<<<<<<<<<<<<<<<1. 음식 분류별 평균 표시하되, 분류명도 같이 출력되게 하기>>>>>>>>>>>>>>>
-- 공통점 : 두 개의 테이블을 묶어서 매칭시키는 것

--1) view 없이 푸는 방법(=중첩질의) select select
select name, avgprice from
(select foodcode avg(price)avgprice from food_truck
group by foodcode) a
join
food_category on a.foodcode=food_category.code; 

name과 avgprice 가져온다, 
from (중첩질의)  푸드코드에서 푸드코드란 분류를 가진 푸드트럭 평균에서. =a.
join -- foodcode랑 foodcategory.code 가 같으면. 교집합.


-------------
select * from food_truck where price=(select * from find_max_price);
>> 푸드 트럭을 선택한다, price = 최고가 맥스 가격.
-- 중첩질의? select 안의 select !! 가장 먼저 들어온 동물의 이름??  datetime 이 빠른 경우. 
SELECT name from animal_ins where datetime=(select min(datetime) from animal_ins);*/
select name from animal_ins where detatime=(select min(detatime) from animal_ins);
-------------


Q. avg(price) avgprice ???????????????????
--view 이용해서 푸는 방법
create view groupby_foodcode_avg as
select foodcode, avg(price) avgprice from food_truck
group by foodcode;


create view groupby_foodcode_avg as
select foodcode, avg(price) avgprice from food_truck
group by foodcode;


create view groupby_foodcode_avg as
select foodcode, avg(pricee) avgprice from food_truck
group by foodcode;


select * from groupby_foodcode_avg;


--------------------------------------------------------------------
select name, avgprice from food_category join groupby_foodcode_avg 
on food_category.code=groupby_foodcode_avg.foodcode;






-- 1-2. 평균값이 비싼 순
select name, avgprice from food_category join groupby_foodcode_avg 
on food_category.code=groupby_foodcode_avg.foodcode 
order by avgprice desc;
-- 1-3. 평균값이 저렴한 순
select name, avgprice from food_category join groupby_foodcode_avg 
on food_category.code=groupby_foodcode_avg.foodcode 
order by avgprice asc; --asc는 생략이 가능함


-- <2. 분류별로 가장 비싼 음식들 표시하기 > 

-- 1. group by 이용해서 각 코드별로 비싼 음식을 표시해야 함.
--select foodcode, max(price) maxprice from food_truck group by foodcode;
--create view max_food as 
--select foodcode, max(price) maxprice from food_truck group by foodcode; --max food view 생성 ㅇㅅㅇ 
-- 1. join 을 이용해서 각 음식의 카테고리명(=분류명) 표시해야 함.
-- distinct : 중복 제거 키워드. 
select distinct food_truck.name foodname, price, food_category.name categoryname 
from food_truck join food_category 
on food_truck.foodcode = food_category.code;

--food_category.에 있는 이름은 categoryname 이다.
-- 1번과 2번을 join ?      그전에 --->> view 를 써서 1, 2번을 줄여야 한다. ㅇㅅㅇ> 
create view food_category_truck as
select distinct food_truck.name foodname, price, food_category.name categoryname
from food_truck join food_category
on food_truck.foodcode = food_category.code;
--create view ~ as (select 문 복사함 ㅇㅅㅇ)

--select * from max_food; -- 코드별 최고가
select * from food_category_truck; -- 각 음식별 카테고리 표시하는 것

--2. 음식을 카테고리명별로 분류하게 되었다.
--그러므로 카테고리명별로 max 값을(view를) 다시 group by 한다.
select categoryname, max(price) maxprice from food_category_truck 
group by categoryname;

drop view max_food;
--view 만들 때 주의사항 : avg나 max 등 함수의 결과는 또 다른 이름으로 치환해야 함
create view max_food as select categoryname, max(price) maxprice from food_category_truck 
group by categoryname;

select * from max_food;
-- 3.  1번과 2번을 join한다.
select foodname, price, max_food.categoryname from max_food join food_category_truck 
on max_food.categoryname=food_category_truck.categoryname and 
max_food.maxprice=food_category_truck.price;
--그 음식이 뭔지는 모르지만, 가격이 젤 높은거 추출 가능 ㅇㅅㅇ


-- <<<<<<<<<<<<<<<<<<<<<< 3. 분류별로 가장 저렴한 음식 표시 >>>>>>>>>>>>>>>>>>>>> 
--1.음식명, 카테고리명이 나오는 테이블 만들기(2번에서 만듦, food_category
--2. food_category_truck에 있는 음식을 group by 해서 min 값을 구한다, 
select categoryname, min(price) minprice from food_category_truck
group by categoryname;
create view min_food as
select categoryname, min(price) minprice from food_category_truck
group by categoryname;

-- 3번 정답
select foodname, price, min_food.categoryname from 
food_category_truck join min_food on 
food_category_truck.categoryname = min_food.categoryname and 
food_category_truck.price = min_food.minprice;

--groupby, view 만들어둔걸로 join 잘해서 중첩질의까지 하면 된다고..^^? 
-- <<<<<<<<<<<<<<4번 평균적으로 볼때 음식이 가장 저렴한 편인 음식 분류? >>>>>>>>>>>>>>
select * from groupby_foodcode_avg;
--코드별로 가격 묶었는데, 각 코드에 매칭되는 이름도 추가(join 이용)
select name, groupby_foodcode_avg.foodcode, avgprice from 
groupby_foodcode_avg join food_category on 
groupby_foodcode_avg.foodcode=food_category.code;

create view group_avg_food as 
select name, groupby_foodcode_avg.foodcode, avgprice from 
groupby_foodcode_avg join food_category on 
groupby_foodcode_avg.foodcode=food_category.code;

select * from group_avg_food;

--중첩질의 
select * from group_avg_food where avgprice=
(select min(avgprice) from group_avg_food);

-- <<<<<<<<<<<<<<<<<<< 5번 평균적으로 볼 때 음식이 가장 비싼편인 음식 분류? >>>>>>>>>>>>>> 
--4번 붙여놓고 MAX 로 바꾸면 끝 ㅇㅅㅇ
select * from group_avg_food where avgprice=
(select max(avgprice) from group_avg_food);




--nullable > false 는 넑값x true는 넑o
/* Write your PL/SQL query statement below */
--use join and make fake table p, l, 

select firstName, lastName, city, state 
from Person P
left join
Address A ON P.personId = A.personId

--person p로 별명 설정, address a 별명 설정한걸 person에 래프트조인한다, 

--왼쪽은 전부 표시, 오른쪽은 조건에 맞는 거만 표시. 오른쪽은 데이터가 없어서 널로 나온다. 
-->>Using a LEFT JOIN would include "nulls" in the result set for you. The normal JOIN statement would include only 1 matching row in the response. In MYSQL, the outer join is a left join.

--select Person.firstname, person.lastname, address.city, address.state --앞에거 두갠 펄슨, 뒤에거 두갠 어드레스에서 가져옴.
--from person --퍼슨을 기준으로 레프트조인한다      
--left join 





--iew : join을 짧게,
/*
join : (교집합) 서로다른 테이블을 하나의 테이블로 합치는거.
중첩질의 : select 문 안에서 select 문이 또 나오는 거....   
crud - > create read=select update delete..
sequence(시퀀스) 오라클, mssql 에 있는것. my sql엔 없다.
시퀀스는 일종의 변수.
for 문의 i 처럼 값이 순차적으로 늘어나고, 내가 수동적으로 값을 넣지 않아도 자동으로 갑 증가. 
nextval을 ㅆㅡ면 그 순서가 아니어도 증가된 순서로 추가해주듯이 증가 값을 넣어줌.
--animal_id 순으로 조회하는 sql 문 작성.
--SELECT * from animal_ins order by animal_id;
--동물 보호소에 들어온 모든 동물의 이름과 보호시작일 조회, animla_id 역순
--SELECT name, datetime from animal_ins order by animal_id desc;
--동물 보호소에 들어온 동물 중 아픈 동물1의 아이디와 이름을 조회하는 SQL 문을 작성해주세요. 이때 결과는 아이디 순으로 조회해주세요.
--SELECT animal_id, name from animal_ins where intake_condition like '%sick%' order by animal_id;
--동물 보호소에 들어온 동물 중 젊은 동물1의 아이디와 이름을 조회하는-->!='aged'재외,  SQL 문을 작성해주세요. 이때 결과는 아이디 순으로 조회해주세요.
--SELECT animal_id, name from animal_ins where intake_condition !='aged' order by animal_id; 

SELECT animal_id, name, datetime from animal_ins order by name, datetime desc;
-- 단, 이름이 같은 동물이면 !!!! 보호를 나중에 시작한 동물을 먼저 보여줘야 한다????? 
-- 중첩질의? select 안의 select !! datetime ? 이 나중인 경우!! 
-- SELECT name from animal_ins where datetime=(select min(datetime) from animal_ins);
-- SELECT animal_id, name, datetime from animal_ins where 'name=name' order by datetime desc; zzzㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ

-- 중첩질의? select 안의 select !! 가장 먼저 들어온 동물의 이름??  datetime 이 빠른 경우. 
SELECT name from animal_ins where datetime=(select min(datetime) from animal_ins);*/
