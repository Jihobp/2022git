package sample.spring.yse;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

//오버로딩 오버라이딩 https://programmingnote.tistory.com/29 
//인터페이스 https://interconnection.tistory.com/129
//autowired https://wildeveloperetrain.tistory.com/26 


//인터페이스에 있는 메소드 반드시추가해줌.  /이ㅣㄴ터페이스 메서드를 반드시 구현해야하는 제약이 생긴다. 
//implements bookService 북서비스를 구현하겠다, 메소드를 구체황.
//public class BookServiceImpl implements BookService , 2번째 add unimplemented method.


//6.6. 책 서비스 클래스 생성
//서비스 클래스는 비즈니스 클래스가 위치하는 곳이다. 스프링MVC 구조에서 서비스 클래스는 컨트롤러와 DAO를 연결하는 역할을 한다.
@Service
public class BookServiceImpl implements BookService {
	@Autowired //? 
	BookDao bookDao;
	
	//6.9. 책 입력 기능 서비스 인터페이스 메소드 시그니쳐 생성
	@Override //BookService.java의  String create(Map<String, Object> map);
	public String create(Map<String, Object> map) {
	    int affectRowCount = this.bookDao.insert(map);   //affectRowCount??? 
	    if (affectRowCount ==  1) {
	        return map.get("book_id").toString();
	    }
	    return null;	    
	}

	//7.4. 책 상세 서비스 클래스 메소드 생성  /서비스는 DAO를 호출한 결과를 바로 리턴하는 일만 한다.
	//7.5. 책 상세 서비스 인터페이스 메소드 시그니쳐 생성 /메소드 시그니쳐 생성도 잊지 말자. 클래스 메소드에서 이클립스의 기능을 활용해 만들면 된다.
	//affectRowCount가 1과 같은지 비교후 true/false를 반환이고, 수정만 되면 되는것이라서 따로 반환 데이터를 할 필요가 없다.
	@Override //BookService.java의 Map<String, Object> detail(Map<String, Object> map);
	public Map<String, Object> detail(Map<String, Object> map){ 
		return this.bookDao.selectDetail(map);
	}
	
		
	//9.4. 책 수정 기능 서비스 클래스 메소드 생성
	@Override
	public boolean edit(Map<String, Object> map) {
		int affectRowCount = this.bookDao.update(map);
		return affectRowCount ==1; 
	}
	//수정의 경우 입력과는 다르게 PK를 가져오거나 하는 절차가 필요없으므로 그저 1개의 행이 제대로 영향받았는지만 검사하면 된다. 
	//affectRowCount가 1과 같은지 비교후 true/false를 반환이고, 수정만 되면 되는것이라서 따로 반환 데이터를 할 필요가 없다.

	
	//10.4 책 삭제 기능 서비스 클래스 메소드 생성
	@Override
	public boolean remove(Map<String, Object> map) {
		// TODO Auto-generated method stub
		int affectRowCount = this.bookDao.delete(map);
		return affectRowCount ==1;
	}
	
	
}


/*- 오버로딩

 사전적 의미의 overloading은 과적이라는 뜻으로 나오는데 개인적으로는 over와 loading을 따로 생각하여 이해하는 것이 머리에 더 잘 들어오는 것 같습니다.
over는 '~이상, 덮인 상태'로 해석하면 무엇을 로딩할 때 기존 것을 덮어서 로딩한다고 해석하면 좋을 것 같습니다. 

- 오버라이드
 사전적 의미의 override는 기각하다, 중단시키다 라는 의미를 입니다. 
 그렇기 때문에 오버라이드는 덮어서 쓴다 라는 뜻으로 해석하여 이해했습니다. 오버라이드는 상속 관계에서만 적용되는 특징이기 때문에 부모 클래스에 있는 메소드를 덮고 자식 클래스에서 정의한 것으로 대체한다고 외웠습니다.
 * */


/*6.6. 책 서비스 클래스 생성
서비스 클래스는 비즈니스 클래스가 위치하는 곳이다. 스프링MVC 구조에서 서비스 클래스는 컨트롤러와 DAO를 연결하는 역할을 한다.
src/main/java 하위 항목 sample.spring.yse 패키지를 우클릭해서 BookServiceImpl 클래스를 만든다.
src/main/java/sample/spring/yse/BookServiceImpl.java
 * 6.7. 책 서비스 인터페이스 생성
책 서비스 클래스에서 선언한 BookService 인터페이스를 생성한다. 서비스 인터페이스는 직접 탐색기에서 생성하지 않고 클래스에서 생성하는 방법을 취한다.
서비스 클래스 BookServiceImpl.java 의 BookService 부분에 빨간 줄이 가 있을 것이다. 
빨간 줄 위에 마우스를 올린다. 
이후 팝업 메뉴가 나오면 create interface 'BookService' 항목을 클릭한다.
새 팝업에서 Source folder를 확인하고 Finish 버튼을 누른다. 예제에서는 서비스 클래스와 같은 패키지 안에 둘 것이므로 경로는 수정하지 않는다.
 * 
 * 6.8. 책 입력 기능 서비스 클래스 메소드 생성
BookDao.insert 메소드를 실행시키는 서비스 메소드를 작성한다. 서비스 메소드는 서비스 구현체인 BookServiceImpl 클래스에 작성하면 된다.

src/main/java/sample/spring/yse/BookServiceImpl.java
6.9. 책 입력 기능 서비스 인터페이스 메소드 시그니쳐 생성
@Override 어노테이션은 자바에 기본으로 내장된 어노테이션으로 상위 인터페이스에 정의된 것을 재정의(Override)한다는 뜻이다.
이클립스에서는 상위 인터페이스에 메소드 시그니쳐가 없을 경우 오류를 표시해 주면서 자동으로 인터페이스 시그니쳐를 만들어주는 기능이 있다. 이 기능을 이용하기 위해 @Override 어노테이션을 사용한다.

서비스 메소드 빨간 줄에 마우스를 올리고 create 'create' in super type 'BookService' 를 클릭한다. 책 입력 인터페이스 시그니쳐 메소드 생성 1
서비스 인터페이스에 메소드 시그니쳐가 추가되었는지 확인한다.
src/main/java/sample/spring/yse/BookService.java
String create(Map<String, Object> map);
*/
